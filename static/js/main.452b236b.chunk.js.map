{"version":3,"sources":["constants/urls.js","configs/routes.js","configs/index.js","configs/url-api.js","store/reducers/index.js","store/actions-names/index.js","store/actions-names/sessions.js","store/reducers/reducer-session.js","store/store.js","utils/utils-auth.js","store/actions/action-session.js","store/actions/action-route.js","page/Login.js","page/App.js","Routes.js","index.js"],"names":["URL_MAP","LOGIN","SAMPLE","buildRoute","args","reduce","prevRoute","item","indexOf","ROUTES","ROOT","config","API_SETTINGS","API_URL","API_MAP","history","START","UPDATE","CLEAR","SESSION_ACTIONS","ACTIONS","state","action","type","data","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createBrowserHistory","basename","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","combineReducers","router","connectRouter","rSession","logger","createLogger","collapsed","middlewares","thunk","routerMiddleware","process","LOGGER","push","store","createStore","applyMiddleware","persistedStore","persistStore","locationHelper","locationHelperBuilder","auth","connectedRouterRedirect","allowRedirectBack","authenticatedSelector","redirectPath","ownProps","location","pathname","getRedirectQueryParam","wrapperDisplayName","notAuth","ActionSessionStart","res","ActionSessionClear","ActionRouteNavigate","obj","undefined","Login","sessionStart","props","success","onClick","this","Component","connect","dispatch","bindActionCreators","App","logout","Routes","exact","path","component","from","to","ReactDOM","render","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.452b236b.chunk.js","sourcesContent":["export const URL_MAP = {\r\n    BASE_URL: '',\r\n    SAMPLE: 'React-Sample-App/sample',\r\n    LOGIN: 'React-Sample-App/login',\r\n}","import { URL_MAP } from '../constants/urls';\r\nimport { generatePath } from 'react-router';\r\n\r\nconst { BASE_URL, LOGIN, SAMPLE } = URL_MAP;\r\n\r\nexport const buildRoute = (...args) => {\r\n    return (\r\n        args.reduce((prevRoute, item) => {\r\n            return prevRoute + (typeof item === 'number' || item.indexOf('(') === -1 ? `/${item}` : item);\r\n        }, '')\r\n    );\r\n};\r\n\r\nexport const applyRouteParams = (path, params) => {\r\n    return generatePath(path, params);\r\n};\r\n\r\nconst ROUTES = {\r\n    ROOT: `${BASE_URL}`,\r\n    LOGIN: buildRoute(LOGIN),\r\n    SAMPLE: buildRoute(SAMPLE),\r\n}\r\n\r\nexport default ROUTES;","import ROUTES from './routes';\r\nimport API_MAP from './url-api';\r\n\r\nexport const API_URL = 'https://api_base_url';\r\n\r\nexport const API_SETTINGS = {\r\n    API_URL,\r\n};\r\n\r\nexport const config = {\r\n    ROUTES,\r\n    API_SETTINGS,\r\n    API_MAP,\r\n    API_URL,\r\n};\r\n\r\nexport default function ConfigStorage() {\r\n    return config;\r\n}\r\n","export default {\r\n    LOGIN: 'api/v1/login',\r\n};","import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\n\r\n\r\nimport rSession from \"./reducer-session\";\r\n\r\nexport const RootReducer = (history) => (\r\n    combineReducers({\r\n        router: connectRouter(history),\r\n        rSession,\r\n    })\r\n);\r\n","import { SESSION_ACTIONS } from './sessions';\r\n\r\nexport default {\r\n    SESSION_ACTIONS,\r\n};","export const SESSION_ACTIONS = {\r\n    START: 'SESSION_START',\r\n    UPDATE: 'SESSION_UPDATE',\r\n    CLEAR: 'SESSION_CLEAR',\r\n};\r\n","import ACTIONS from '../actions-names';\r\n\r\nconst { SESSION_ACTIONS } = ACTIONS;\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SESSION_ACTIONS.START:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case SESSION_ACTIONS.CLEAR:\r\n\r\n            return {};\r\n        case SESSION_ACTIONS.UPDATE:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { createBrowserHistory } from 'history';\r\nimport { createLogger } from 'redux-logger';\r\nimport { routerMiddleware } from 'connected-react-router';\r\n\r\n\r\nimport ConfigStorage from '../configs/index';\r\nimport { RootReducer } from '../store/reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const history = createBrowserHistory({\r\n    basename: ConfigStorage().ROUTES.ROOT,\r\n});\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['rSession']\r\n}\r\n\r\n\r\nconst persistedReducer = persistReducer(persistConfig, RootReducer(history));\r\n\r\nconst logger = createLogger({\r\n    collapsed: true,\r\n});\r\n\r\nconst middlewares = [\r\n    thunk,\r\n    routerMiddleware(history),\r\n];\r\n\r\nif (process.env.LOGGER) {\r\n    middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(\r\n    persistedReducer,\r\n    composeEnhancers(applyMiddleware(...middlewares))\r\n)\r\n\r\nexport const getState = () => store.getState();\r\n\r\nexport const getHeader = () => {\r\n    const storeData = getState();\r\n    const { rSession } = storeData;\r\n\r\n    return {\r\n        userId: rSession.viewModel !== undefined ? rSession.viewModel.userId : \"\",\r\n        accessToken: \"AccessBearer \" + (rSession.viewModel !== undefined ? rSession.token : \"\")\r\n    }\r\n}\r\n\r\nexport const persistedStore = persistStore(store);","import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper'\r\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect'\r\n\r\nimport ROUTES from '../configs/routes';\r\n\r\nconst locationHelper = locationHelperBuilder({})\r\n\r\nexport const auth = connectedRouterRedirect({\r\n    allowRedirectBack: true,\r\n    authenticatedSelector: state => {\r\n        return !!state.rSession['success']\r\n    },\r\n    redirectPath: (state, ownProps) => {\r\n        if (ownProps.location.pathname.indexOf('?') === -1) {\r\n            return ROUTES.LOGIN\r\n        }\r\n        return locationHelper.getRedirectQueryParam(ownProps) || ROUTES.LOGIN\r\n    },\r\n    wrapperDisplayName: 'UserIsAuthenticated'\r\n})\r\n\r\nexport const notAuth = connectedRouterRedirect({\r\n    allowRedirectBack: false,\r\n    authenticatedSelector: state => !state.rSession['success'],\r\n    redirectPath: (state, ownProps) => {\r\n        if (ownProps.location.pathname.indexOf('?') === -1) {\r\n            return ROUTES.ROOT\r\n        }\r\n        return locationHelper.getRedirectQueryParam(ownProps) || ROUTES.ROOT\r\n    },\r\n    wrapperDisplayName: 'UserIsNotAuthenticated'\r\n})","import ACTIONS from '../actions-names';\r\n\r\nconst { SESSION_ACTIONS } = ACTIONS;\r\n\r\nexport function ActionSessionStart(res) {\r\n    let data = {};\r\n    data = {\r\n        ...res,\r\n    }\r\n\r\n    return {\r\n        type: SESSION_ACTIONS.START,\r\n        data\r\n    }\r\n}\r\n\r\nexport function ActionSessionClear(res) {\r\n\r\n    return {\r\n        type: SESSION_ACTIONS.CLEAR,\r\n    }\r\n}\r\n\r\nexport function ActionUpdateSession(data) {\r\n    return {\r\n        type: SESSION_ACTIONS.UPDATE,\r\n        data\r\n    }\r\n}","import { push, goBack, goForward } from 'connected-react-router';\r\n\r\n\r\nexport function ActionRouteNavigate(location, obj) {\r\n    if (obj !== undefined)\r\n        return push(location, obj)\r\n    return push(location);\r\n}\r\n\r\nexport function ActionRouteNavigateR(location) {\r\n    return {\r\n        type: 'GO_TO_PAGE',\r\n        url: location,\r\n    };\r\n}\r\n\r\nexport function ActionRouteGoBack() {\r\n    return goBack();\r\n}\r\n\r\nexport function ActionRouteGoForward() {\r\n    return goForward();\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport ROUTES from \"../configs/routes\";\r\nimport { ActionSessionStart } from \"../store/actions/action-session\";\r\nimport { ActionRouteNavigate } from \"../store/actions/action-route\";\r\n\r\nexport class Login extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n        <button onClick={this.sessionStart}>Login</button>\r\n      </div>\r\n    );\r\n  }\r\n  sessionStart = () => {\r\n    this.props.ActionSessionStart({ success: true });\r\n    this.props.ActionRouteNavigate(ROUTES.ROOT);\r\n  };\r\n}\r\n\r\nfunction mapStateToProps({ rSession }) {\r\n  return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return bindActionCreators(\r\n    {\r\n      ActionSessionStart,\r\n      ActionRouteNavigate,\r\n    },\r\n    dispatch\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport ROUTES from '../configs/routes';\r\nimport { ActionSessionClear } from \"../store/actions/action-session\";\r\nimport { ActionRouteNavigate } from \"../store/actions/action-route\";\r\n\r\n\r\nexport class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Sample Page</h1>\r\n                <p>This is the Secure Page</p>\r\n                <button onClick={this.logout}>Logout</button>\r\n            </div>\r\n        );\r\n    }\r\n    logout = () => {\r\n        this.props.ActionSessionClear();\r\n        this.props.ActionRouteNavigate(ROUTES.LOGIN);\r\n    };\r\n}\r\n\r\nfunction mapStateToProps({ rSession }) {\r\n    return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators(\r\n        {\r\n            ActionSessionClear,\r\n            ActionRouteNavigate\r\n        },\r\n        dispatch\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router';\r\nimport ROUTES from './configs/routes';\r\nimport { auth, notAuth } from './utils/utils-auth';\r\n\r\nimport Login from './page/Login';\r\nimport App from './page/App';\r\n\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={ROUTES.LOGIN} component={notAuth(Login)} />\r\n            <Route exact path={ROUTES.SAMPLE} component={auth(App)} />\r\n            <Redirect from={ROUTES.ROOT} to={ROUTES.SAMPLE} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nRoutes.propTypes = {};\r\n\r\nexport default Routes;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { store, persistedStore, history } from './store/store';\r\nimport Routes from './Routes';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate persistor={persistedStore}>\r\n            <ConnectedRouter history={history}>\r\n                <Routes history={history} store={store} />\r\n            </ConnectedRouter>\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}